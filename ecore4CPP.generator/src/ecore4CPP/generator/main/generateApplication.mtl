[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateApplication('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateClass /]
[import ecore4CPP::generator::main::generateBuildFile /]
[import ecore4CPP::generator::main::generateProjectFiles /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]

[template public generateApplication(aPackage : EPackage) { packageName : String = aPackage.name; }]
[file ('../application/src/main.cpp', false, 'UTF-8')]

#include <iostream>

#include "[aPackage.name/]/[packageName.toUpperFirst()/]Factory.hpp"
#include "[aPackage.name/]/[packageName.toUpperFirst()/]Package.hpp"

[for (aEClass : EClass | aPackage.eAllContents(EClass))]
#include "[aPackage.name/]/[aEClass.name.toUpperFirst()/].hpp"
[/for]
[for (anEEnum : EEnum | aPackage.eAllContents(EEnum))]
#include "[aPackage.name/]/[anEEnum.name/].hpp"
[/for]

// [protected ('includes')] 
// You may manually edit additional includes, won't be overwritten upon generation.

// [/protected]

using namespace [packageName/];

// [protected ('functions')] 
// You may manually edit additional functions, won't be overwritten upon generation.

// [/protected]

int main ()
{
	//Create Model Factory and Package
	std::shared_ptr<[packageName.toUpperFirst()/]Factory> factory = [packageName.toUpperFirst()/]Factory::eInstance();
	std::shared_ptr<[packageName.toUpperFirst()/]Package> package = [packageName.toUpperFirst()/]Package::eInstance();

// [protected ('main')]
// You may manually edit the following lines, won't be overwritten upon generation.

// [/protected]

    return 0;

}
[/file]

[comment	build application files/]
[file ('../application/'.concat('CMakeLists.txt'), false, 'UTF-8')]
#############################################################################
#																			#
#		 			CMakeList created by UML4CPP Generator					# 
#																			#
#############################################################################

# C++ project of application for [packageName/].ecore, generated by UML4CPP

CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

SET(CMAKE_C_COMPILER "gcc.exe")
SET(CMAKE_CXX_COMPILER "g++.exe")

# [protected ('project_name')]
# You may manually edit the project name, won't be overwritten upon generation.
PROJECT(App_[packageName/])
# [/protected]

IF(NOT CMAKE_BUILD_TYPE) 
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF(NOT CMAKE_BUILD_TYPE)
SET(CMAKE_CXX_STANDARD 14)
SET(GCC_COVERAGE_LINK_FLAGS "-fopenmp")
SET(CMAKE_CXX_FLAGS "-std=c++11 -Wall -Wno-overloaded-virtual -Wdeprecated-declarations -fopenmp -fmax-errors=5")
SET(CMAKE_CXX_FLAGS_DEBUG " -Og -ggdb -DACTIVITY_DEBUG_ON")
[if (packageName='uml')]
SET(CMAKE_CXX_FLAGS_RELEASE " -O1 -DNDEBUG")
[else]
SET(CMAKE_CXX_FLAGS_RELEASE " -O3 -DNDEBUG")
[/if]

string(REPLACE "\\" "/" MDE4CPP_HOME $ENV{MDE4CPP_HOME})

SET(SOURCE_FILES
	src/main.cpp
# [protected ('cpp')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
)


INCLUDE_DIRECTORIES(
	../
	${MDE4CPP_HOME}/application/include
# [protected ('includes')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
)

if(NOT UNIX)
	FIND_LIBRARY(PLUGINFRAMEWORK_DEBUG PluginFrameworkd ${MDE4CPP_HOME}/application/lib)
	FIND_LIBRARY(PLUGINFRAMEWORK_RELEASE PluginFramework ${MDE4CPP_HOME}/application/lib)
endif()

if(UNIX AND NOT APPLE)
    # for Linux, BSD, Solaris, Minix
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
	FIND_LIBRARY([pack.name.toUpperCase()/]_DEBUG [pack.name/]d.so ${MDE4CPP_HOME}/application/bin)
	FIND_LIBRARY([pack.name.toUpperCase()/]_RELEASE [pack.name/].so ${MDE4CPP_HOME}/application/bin)
[/for]
	FIND_LIBRARY([packageName.toUpperCase()/]_DEBUG [packageName/]d.so ${MDE4CPP_HOME}/application/lib)
	FIND_LIBRARY([packageName.toUpperCase()/]_RELEASE [packageName/].so ${MDE4CPP_HOME}/application/lib)
# [protected ('library_finding_unix')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
else()
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
	FIND_LIBRARY([pack.name.toUpperCase()/]_DEBUG [pack.name/]d ${MDE4CPP_HOME}/application/lib)
	FIND_LIBRARY([pack.name.toUpperCase()/]_RELEASE [pack.name/] ${MDE4CPP_HOME}/application/lib)
[/for]
	FIND_LIBRARY([packageName.toUpperCase()/]_DEBUG [packageName/]d ${MDE4CPP_HOME}/application/lib)
	FIND_LIBRARY([packageName.toUpperCase()/]_RELEASE [packageName/] ${MDE4CPP_HOME}/application/lib)
# [protected ('library_finding_not_unix')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
endif()


ADD_EXECUTABLE(${PROJECT_NAME} ${SOURCE_FILES})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX "d")

if(NOT UNIX)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} 
	debug ${PLUGINFRAMEWORK_DEBUG}
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
	debug ${[pack.name.toUpperCase()/]_DEBUG}
[/for]
	debug ${[packageName.toUpperCase()/]_DEBUG}
# [protected ('library_assigning_debug_not_unix')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
)
else()
TARGET_LINK_LIBRARIES(${PROJECT_NAME} 
	#debug ${PLUGINFRAMEWORK_DEBUG}
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
	debug ${[pack.name.toUpperCase()/]_DEBUG}
[/for]
	debug ${[packageName.toUpperCase()/]_DEBUG}
# [protected ('library_assigning_debug_unix')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
)
endif()

if(NOT UNIX) 
TARGET_LINK_LIBRARIES(${PROJECT_NAME}
	optimized ${PLUGINFRAMEWORK_RELEASE}
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
	optimized ${[pack.name.toUpperCase()/]_RELEASE}
[/for]
	optimized ${[packageName.toUpperCase()/]_RELEASE}
# [protected ('library_assigning_release_not_unix')] 
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
)
else()
TARGET_LINK_LIBRARIES(${PROJECT_NAME}
	#optimized ${PLUGINFRAMEWORK_RELEASE}
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
	optimized ${[pack.name.toUpperCase()/]_RELEASE}
[/for]	
	optimized ${[packageName.toUpperCase()/]_RELEASE}
# [protected ('library_assigning_release_unix')] 
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
)
endif()

#-----------------------------------------------------
# DELIVERING binaries and header to ${MDE4CPP_HOME}
#-----------------------------------------------------

INSTALL(TARGETS ${PROJECT_NAME} 
	RUNTIME DESTINATION ${MDE4CPP_HOME}/application/bin
)
[/file]

[aPackage.generateProjectsFiles(true)/]
[/template]
[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateStructuralFeatureSetGet('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::generateReference /]

[**
 * eGet Function
*/]
[template public generateeGetDel(aClass : EClass,impl : Boolean)]
virtual boost::any eGet(int featureID, bool resolve, bool coreType) const [abstractSufix(impl)/];
[/template]

[template public generateeSetDel(aClass : EClass,impl : Boolean)]
virtual void eSet(int featureID, boost::any newValue) [abstractSufix(impl)/];
[/template]

[template public generateeGetImpl(aClass : EClass)]
boost::any [aClass.name.toUpperFirst().concat('Impl')/]::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
	[for (struct : EStructuralFeature | aClass.eAllStructuralFeatures->asOrderedSet()->sortedBy(name))]
		case [struct.metamodelPackageNameForEstructuralFeture(aClass)/]::[struct.memberNameUpper()/]:
			return [struct.GetterName()/](); //[aClass.getClassifierID()/][struct.getFeatureID()/]
	[/for]
	}
	return boost::any();
}
[/template]

[template public generateeSetImpl(aClass : EClass)]
void [aClass.name.toUpperFirst().concat('Impl')/]::eSet(int featureID, boost::any newValue)
{
	switch(featureID)
	{
[for (struct : EStructuralFeature | aClass.eAllStructuralFeatures->select(upperBound = 1 and changeable)->asOrderedSet()->sortedBy(name))]
		case [struct.metamodelPackageNameForEstructuralFeture(aClass)/]::[struct.memberNameUpper()/]:
		{
			// BOOST CAST
[if (not struct.eType.oclIsKindOf(EDataType))]
			std::shared_ptr<[struct.eGenericType.generateCppType()/]> _[struct.name/] = boost::any_cast<std::shared_ptr<[struct.eGenericType.generateCppType()/]>>(newValue);
[else]
			[struct.eGenericType.generateCppType()/] _[struct.name/] = boost::any_cast<[struct.eGenericType.generateCppType()/]>(newValue);
[/if]
			[struct.SetterName()/](_[struct.name/]); //[aClass.getClassifierID()/][struct.getFeatureID()/]
			break;
		}
[/for]
	}
}
[/template]
[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateImplementationSource('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateAttribute/]
[import ecore4CPP::generator::main::generateOperation/]
[import ecore4CPP::generator::main::generateReference/]
[import ecore4CPP::generator::main::generateStructuralFeatureSetGet /]
[import ecore4CPP::generator::main::generateType/]
[import ecore4CPP::generator::main::generateUnion /]
[import ecore4CPP::generator::main::generateModel /]
[import ecore4CPP::generator::main::helper /]

[template public generateImplementationSource(aClass : EClass) { className : String = aClass.name.toUpperFirst().concat('Impl'); }]
[file (aClass.ePackage.name.concat('/impl/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[className.concat('.hpp')/]"
#include <iostream>
#include <cassert>
#include "EAnnotation.hpp"
#include "EClass.hpp"
#include "[aClass.ePackage.name.toUpperFirst().concat('PackageImpl')/].hpp"
[if (aClass.hasKey('includes'))]
[aClass.valueKey('includes')/]
[/if]

//Forward declaration includes
[for (element : EClassifier| aClass.includes()->selectByKind(EClass)->asOrderedSet()->sortedBy(name)) separator ('\n')]
#include "[element.name.toUpperFirst()/].hpp"
[/for]


[comment namespace /]
using namespace [aClass.ePackage.name/];

//*********************************
// Constructor / Destructor
//*********************************
[className/]::[className/]()
{
	//*********************************
	// Attribute Members
	//*********************************
	[for (aAttribute : EAttribute | aClass.eAttributes->asOrderedSet()->sortedBy(name)) separator ('\n')]
	[aAttribute.generateAttributeInit()/][/for]

	//*********************************
	// Reference Members
	//*********************************
	[comment]References must be initialized in this order:
	1st Unions
	2nd Subset Unions
	3rd Subsets that should be unions
	4th all the rest.
	[/comment]
	//References
	[for (aReference : EReference | aClass.eReferences->asOrderedSet()->sortedBy(name)) separator ('\n')]
	[aReference.generateReferenceInit()/]
	[/for]

	//Init references
	[for (aReference : EReference | aClass.eReferences->asOrderedSet()->sortedBy(name)) separator ('\n')]
	[aReference.InitReferences()/]
	[/for]
}

[className/]::~[className/]()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete [aClass.name.toUpperFirst()/] "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
	[aClass.eReferences->sortedBy(name).generateProtectedReferenceDeleter()/]
}


[let ref:OrderedSet(EReference) = aClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name)) separator('\n')]
//Additional constructor for the containments back reference
[if(ref->select(eType.name = aReference.eType.name)->size()>1 )]
	[if(ref->select(eType.name = aReference.eType.name)->asOrderedSet()->sortedBy(name)->first() = aReference)]
			[className/]::[className/]([aReference.generateReferenceType(true)/] par_[aReference.eType.name/], const int reference_id)
			:[className/]()
			{
				switch(reference_id)
				{	
				[for(multipleRef : EReference | ref->select(eType.name = aReference.eType.name)->sortedBy(name))]
				case [aClass.ePackage.name.toUpperFirst()/]Package::[multipleRef.memberNameUpper()/]:
					 m_[multipleRef.name/] = par_[aReference.eType.name/];
					 return;
				[/for]
				default:
				std::cerr << __PRETTY_FUNCTION__ <<" Reference not found in class with the given ID" << std::endl;
				}
			   
			}
	[/if]
	[else]
			[className/]::[className/]([aReference.generateReferenceType(true)/] par_[aReference.name/])
			:[className/]()
			{
			    m_[aReference.name/] = par_[aReference.name/];
			}
	[/if]




[/for]
[/let]


[comment]Don't forget to call the class contructor before initializing the unions and subsets![/comment]
[className/]::[className/](const [className/] & obj):[className/]()
{
	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy [aClass.name.toUpperFirst()/] "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	[for (att : EAttribute | aClass.eAllAttributes->asOrderedSet()->sortedBy(name))]
	m_[att.name/] = obj.[att.GetterName()/]();
	[/for]

	//copy references with no containment (soft copy)
	
	[for (ref : EReference | aClass.eAllReferences->select(aRef: EReference | aRef.isBackReference() or (aRef.containment = false and not aRef.hasSubset()))->asOrderedSet()->sortedBy(name))]
	[if (ref.hasSetter() or ref.upperBound = 1)]
	m_[ref.name/]  = obj.[ref.GetterName()/]();
	[else]
	[ref.generateReferenceType()/] _[ref.name/] = obj.[ref.GetterName()/]();
	m_[ref.name/].reset(new [ref.generateReferenceType(false)/](*(obj.[ref.GetterName()/]().get())));
	[/if]

	[/for]

	[comment]References must be copied in this order:
	1st Unions
	2nd Subset Unions
	3rd all the rest.
	[/comment]
	//Clone references with containment (deep copy)

	[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = true or eRef.hasSubset()) and (not eRef.isUnion()) and (not eRef.isBackReference()))->asOrderedSet()->sortedBy(name))]
	[if (ref.hasSetter() or ref.upperBound = 1)]
	if(obj.[ref.GetterName()/]()!=nullptr)
	{
		[if(ref.upperBound=1)]
		m_[ref.name/] = std::dynamic_pointer_cast<[ref.eType.generateType()/]>(obj.[ref.GetterName()/]()->copy());
		[else]
		m_[ref.name/] = std::dynamic_pointer_cast<Bag<[ref.eType.generateType()/]>>(obj.[ref.GetterName()/]()->copy());
		[/if]
	}
	[else]
	std::shared_ptr<Bag<[ref.eType.generateType()/]>> _[ref.name/]List = obj.[ref.GetterName()/]();
	for(std::shared_ptr<[ref.eType.generateType()/]> _[ref.name/] : *_[ref.name/]List)
	{
		this->[ref.GetterName()/]()->add(std::shared_ptr<[ref.eType.generateType()/]>(std::dynamic_pointer_cast<[ref.eType.generateType()/]>(_[ref.name/]->copy())));
	}
	[/if]
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Copying the Subset: " << "m_[ref.name/]" << std::endl;
	#endif
	[/for]

	[for (aReference : EReference | aClass.eReferences->select(eRef: EReference|eRef.containment = true and not eRef.isUnion())->asOrderedSet()->sortedBy(name)) separator ('\n')]
	[aReference.InitReferences()/]
	[/for]
}

std::shared_ptr<ecore::EObject>  [className/]::copy() const
{
	std::shared_ptr<ecore::EObject> element(new [className/](*this));
	return element;
}

std::shared_ptr<[needNamespace(aClass.ePackage, 'EClass')/]> [className/]::eStaticClass() const
{
	return [aClass.ePackage.name.concat('PackageImpl').toUpperFirst()/]::eInstance()->get[aClass.name.toUpperFirst()/]();
}

//*********************************
// Attribute Setter Getter
//*********************************
[for (aAttribute : EAttribute | aClass.eAttributes->asOrderedSet()->sortedBy(name)) separator ('\n')]
[aAttribute.generateAttributeSetterImplementationCpp(true)/]

[aAttribute.generateAttributeGetterImplementationCpp()/]
[/for]

//*********************************
// Operations
//*********************************
[for (aOperation : EOperation | aClass.eOperations->asOrderedSet()->sortedBy(name)) separator ('\n')]
[aOperation.generateOperationImplementation()/]
[/for]

//*********************************
// References
//*********************************
[for (aReference : EReference | aClass.eReferences->asOrderedSet()->sortedBy(name)) separator ('\n')]
[aReference.generateReferenceCpp()/]
[/for]

//*********************************
// Union Getter
//*********************************
[aClass.generateUnionGetterCpp()/]

//*********************************
// Structural Feature Getter/Setter
//*********************************
[aClass.generateeGetImpl()/]


//*********************************
// Persistence Functions
//*********************************
void [aClass.name.concat('Impl')/]::load(std::shared_ptr<persistence::XHandler> handler) 
{
try{
	std::cout << "| WARNING  | " << " Called " << __PRETTY_FUNCTION__ << " while is not implemented yet." << std::endl;

	// get EcoreFactory
	std::shared_ptr<ecore::EcoreFactory> factory = ecore::EcoreFactory::eInstance();
	
	// Set Attributes

	// get list of current Node Attributes	
	std::map<std::string, std::string> attr_list = handler->getAttributeList();
	
	std::map<std::string, std::string>::const_iterator iter;

[for (aAttribute : EAttribute | aClass.eAllAttributes->select(eAtt: EAttribute|(eAtt.transient = false))->asOrderedSet()->sortedBy(name)) separator ('\n')]
[if (aAttribute.eType.oclIsKindOf(EDataType) and not(aAttribute.eType.name = 'EJavaClass'))]
[comment]
// Attributes that are from type EJavaClass (void*) has not to export to xml. 
[/comment]
[if (not(aAttribute.upperBound = 1))]
	//handler->addAttribute( "[aAttribute.name/]", this->[aAttribute.GetterName()/]() ); // upperBound != 1 so [aAttribute.GetterName()/]() is a list/bag/union
	// TODO needs an implementation to set list of strings to this attribute
	std::cout << "| ERROR    | " << __PRETTY_FUNCTION__ << " needs an implementation to set list of strings to this attribute." << std::endl; 
[else]
	iter = attr_list.find("[aAttribute.name/]");
	if ( iter != attr_list.end() )
	{
[comment]
//[aAttribute.eType/]
//[aAttribute.eType.name/]
[/comment]
[if (generateType(aAttribute.eType) = 'bool')]
		// this attribute is a 'bool'
		bool value;
		std::istringstream(iter->second) >> std::boolalpha >> value;
[elseif ((generateType(aAttribute.eType) = 'int'))]
		// this attribute is a 'int'
		int value;
		std::istringstream ( iter->second ) >> value;
[elseif ((generateType(aAttribute.eType) = 'long'))]
		// this attribute is a 'long'
		long value;
		std::istringstream ( iter->second ) >> value;
[elseif ((generateType(aAttribute.eType) = 'float'))]
		// this attribute is a 'float'
		float value;
		std::istringstream ( iter->second ) >> value;
[elseif ((generateType(aAttribute.eType) = 'double'))]
		// this attribute is a 'double'
		double value;
		std::istringstream ( iter->second ) >> value;
[elseif ((generateType(aAttribute.eType) = 'char'))]
		// this attribute is a 'char'
		char value;
		std::istringstream ( iter->second ) >> value;
[elseif ((generateType(aAttribute.eType) = 'std::string'))]
		// this attribute is a 'std::string'
		std::string value;
		value = iter->second;
[else]
		// TODO this attribute has a non handle type
		std::cout << "| ERROR    | " << __PRETTY_FUNCTION__ << " handle type of '[aAttribute.name/]'" << " [aAttribute.eType/]" << std::endl; 
		value = "";
[/if]
		this->[aAttribute.SetterName()/](value);
	}
[/if]
[/if]
[/for]
	
	// Set References (containment == false)
	std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
	std::shared_ptr<ecore::EStructuralFeature> esf;
[for (aReference : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = false) and (eRef.transient = false) and (eRef.unsettable = true))->asOrderedSet()->sortedBy(name)) separator ('\n')]
	// TODO handle references to other objects
	std::cout << "| WARNING  | " << __PRETTY_FUNCTION__ << " handle references to other objects '[aReference.name/]'" << " [aReference.eType/]" << std::endl; 
	//[aReference.name/]->setContainer( this ); // TODO remove comment
	// TODO here
	esf = metaClass->getEStructuralFeature("[aReference.name/]");
[/for]

	//
	// Create new objects (from references (containment == true))
	//
	
	int numChildren = handler->getNumOfChildren();
	//std::cout << "| DEBUG    |" << " Children: " << numChildren << std::endl;
	
	std::string nodeName;
	int ii;
	for(ii = 0; ii < numChildren; ++ii)
	{
		//std::cout << "| DEBUG    |" << " Child: " << ii << std::endl;
		nodeName = handler->getNextNodeName();

[for (aReference : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = true) and (eRef.transient = false))->asOrderedSet()->sortedBy(name)) separator ('\n')]
[if (aReference.upperBound = 1)]
		// TODO implement "aReference.upperBound = 1" for '[aReference.name/]'
		std::cout << "| ERROR    |" << __PRETTY_FUNCTION__ << " implement 'aReference.upperBound = 1' for '[aReference.name/]'" << std::endl;
[else]
		if ( nodeName.compare("[aReference.name/]") == 0 )
		{
			/* 
			 * Create '[aReference.eType.generateType()/]'
			 */
			std::shared_ptr<[aReference.eType.generateType()/]> [aReference.name/];

			// 1. Create new Object '[aReference.name/]' with Factory and set Container to Object 'this.
[comment]
//[aReference.eType.oclAsType(EClass).abstract/]
//[aReference.eType/]
[/comment]
[if (aReference.eType.oclAsType(EClass).abstract = true)]
			attr_list = handler->getAttributeList();
			iter = attr_list.find("xsi:type");
			if ( iter != attr_list.end() )
			{
				std::string _type = iter->second;
				size_t const double_dot = _type.find(L':', 0);
				std::string _type_ns = _type.substr(0, double_dot); // TODO is not used in this case
				std::string _type_name = _type.substr(double_dot + 1);
				[aReference.name/] = std::dynamic_pointer_cast<[aReference.eType.generateType()/]>(factory->create(_type_name, handler->getCurrentObj<ecore::EObject>()));
			}
			else
			{
				std::cout << "| ERROR    |" << __PRETTY_FUNCTION__ << " no xsi:type for attribute '[aReference.name/]'" << std::endl;
			}
[else]
			//[aReference.name/] = factory->create[aReference.eType.name/]_in_[aReference.eContainingClass.name/](handler->getCurrentObj<[aReference.eContainingClass.transformType()/]>()); 
			[aReference.name/] = factory->create[aReference.eType.name/]_in_(handler->getCurrentObj<[aReference.eContainingClass.transformType()/]>());
[/if]
//[aReference.eContainingClass.name/]
//[aReference.eType.name/]
//[aReference.name/]
//[aReference.eClass()/]


			// 2. Report Handler to set '[aReference.name/]' as new current Object.
			handler->setCurrentObj([aReference.name/]);

			// 3. Call recursively '[aReference.name/].load().
			[aReference.name/]->load(handler);

			// 4. Report Handler to set 'this' as new current Object.
			handler->releaseObj(); // TODO use later API release() of LoadHandler.

			// 5. Add '[aReference.name/]' to Handler's internal Map, that is used for resolving references.
			handler->addToMap([aReference.name/]);
		}
[/if]
[/for]
	}
	
	//std::shared_ptr<ecore::EPackage> pck_root( factory->createEPackage() );
}
catch (std::exception& e)
{
	std::cout << e.what() << std::endl;
}
catch (...) 
{
	std::cout << "Exception occurred" << std::endl;
}	
}



void [aClass.name.concat('Impl')/]::save(std::shared_ptr<persistence::XHandler> handler) const
{
	//
	// Add attributes
	//
[for (aAttribute : EAttribute | aClass.eAllAttributes->select(eAtt: EAttribute|(eAtt.transient = false))->asOrderedSet()->sortedBy(name)) separator ('\n')]
[if (aAttribute.eType.oclIsKindOf(EDataType) and not(aAttribute.eType.name = 'EJavaClass'))]
[comment]
// Attributes that are from type EJavaClass (void*) has not to export to xml. 
[/comment]
[if (not(aAttribute.upperBound = 1))]
	handler->addAttribute( "[aAttribute.name/]", this->[aAttribute.GetterName()/]() ); // upperBound != 1 so [aAttribute.GetterName()/]() is a list/bag/union 
[else]
	[if (aAttribute.defaultValueLiteral->notEmpty())]
	if ( this->[aAttribute.GetterName()/]() != [if (aAttribute.eType.oclIsTypeOf(EEnum))][aAttribute.eType.name/]::[aAttribute.defaultValueLiteral.toUpperCase()/][else][aAttribute.defaultValueLiteral/][/if] ) // default: [aAttribute.name/] = [if (aAttribute.eType.oclIsTypeOf(EEnum))][aAttribute.eType.name/]::[aAttribute.defaultValueLiteral.toUpperCase()/][else][aAttribute.defaultValueLiteral/][/if]
	{
		handler->addAttribute( "[aAttribute.name/]", this->[aAttribute.GetterName()/]() );
	}
	[else]
	handler->addAttribute( "[aAttribute.name/]", this->[aAttribute.GetterName()/]() );
	[/if]
[/if]
[else]
// [aAttribute.eType/]
[/if]
[/for]

[comment]
//1.0 (eRef.containment = false)
[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = false))->asOrderedSet()->sortedBy(name))]
[ref.name/]
[/for]

//1.1 (eRef.containment = true)
[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = true))->asOrderedSet()->sortedBy(name))]
[ref.name/]
[/for]

//2.0 (eRef.containment = false or eRef.hasSubset()) and (not eRef.isUnion())
[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = false or eRef.hasSubset()) and (not eRef.isUnion()))->asOrderedSet()->sortedBy(name))]
[ref.name/]
[/for]

//2.1 (eRef.containment = false or eRef.hasSubset()) and (eRef.isUnion())
[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = false or eRef.hasSubset()) and (eRef.isUnion()))->asOrderedSet()->sortedBy(name))]
[ref.name/]
[/for]

//2.2 (eRef.containment = true or eRef.hasSubset()) and (not eRef.isUnion())
[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = true or eRef.hasSubset()) and (not eRef.isUnion()))->asOrderedSet()->sortedBy(name))]
[ref.name/]
[/for]

//2.3 (eRef.containment = true or eRef.hasSubset()) and (eRef.isUnion())
[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = true or eRef.hasSubset()) and (eRef.isUnion()))->asOrderedSet()->sortedBy(name))]
[ref.name/]
[/for]

//3.0 (eRef.containment = true or eRef.hasSubset())
[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = true or eRef.hasSubset()))->asOrderedSet()->sortedBy(name))]
[ref.name/]
[/for]

//3.1 (eRef.containment = false or eRef.hasSubset())
[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = false or eRef.hasSubset()))->asOrderedSet()->sortedBy(name))]
[ref.name/]
[/for]

//4.0 (eRef.containment = true) and (not eRef.isUnion())
[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = true ) and (not eRef.isUnion()))->asOrderedSet()->sortedBy(name))]
[ref.name/]
[/for]

//4.1 (eRef.containment = true) and (eRef.isUnion())
[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = true) and (eRef.isUnion()))->asOrderedSet()->sortedBy(name))]
[ref.name/]
[/for]

//4.2 (eRef.containment = false) and (not eRef.isUnion())
[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = false) and (not eRef.isUnion()))->asOrderedSet()->sortedBy(name))]
[ref.name/]
[/for]

//4.3 (eRef.containment = false) and (eRef.isUnion())
[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = false ) and (eRef.isUnion()))->asOrderedSet()->sortedBy(name))]
[ref.name/]
[/for]


//5.0 (eRef.hasSubset()) and (not eRef.isUnion())
[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.hasSubset()) and (not eRef.isUnion()))->asOrderedSet()->sortedBy(name))]
[ref.name/]
[/for]

//5.1 (eRef.hasSubset()) and (eRef.isUnion())
[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.hasSubset()) and (eRef.isUnion()))->asOrderedSet()->sortedBy(name))]
[ref.name/]
[/for]

//6 sollte funktionieren (ungetestet)
[for (aReference : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = false ))->asOrderedSet()->sortedBy(name))]
[if (hasDocKeyX('suppressedIsSetVisibility'))]
	handler->addReference("[aReference.name/]", this->[aReference.GetterName()/]());
[else]
// [aReference.name/]
[/if]
[/for]

[/comment]

	//
	// Add references
	//
[for (aReference : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = false) and (eRef.transient = false) and (eRef.unsettable = true))->asOrderedSet()->sortedBy(name))]
	handler->addReference("[aReference.name/]", this->[aReference.GetterName()/]());
[/for]

	//
	// Add new tags (from references)
	//
[for (aReference : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = true) and (eRef.transient = false))->asOrderedSet()->sortedBy(name)) separator ('\n')]
[if (aReference.upperBound = 1)]
	// TODO implement "aReference.upperBound = 1" for '[aReference.name/]'
	std::cout << "| ERROR    |" << __PRETTY_FUNCTION__ << " implement 'aReference.upperBound = 1' for '[aReference.name/]'" << std::endl;
[else]
	[aReference.generateReferenceType()/] list_[aReference.name/] = this->[aReference.GetterName()/]();

	if ( list_[aReference.name/]->size() != 0) {
		for ( std::shared_ptr<[aReference.eType.generateType()/]> [aReference.name/] : *list_[aReference.name/] ) {
			handler->createAndAddElement( "[aReference.name/]" );
[if (aReference.eType.oclAsType(EClass).abstract = true)]
			handler->addAttribute( "xsi:type", handler->getType([aReference.name/]) );
[/if]
[comment]
			std::shared_ptr<ecore::EClass> meta_class = [aReference.name/]->eClass();
			if (meta_class->getName().compare("[aReference.eType.name/]") != 0)
			{
				handler->addAttribute( "xsi:type", handler->getType([aReference.name/]) );
			}
[/comment]
			[aReference.name/]->save( handler ); // recusive call
			handler->release(); // call handler to step to previous level
		}
	}
[/if]
[/for]

}
[/file]
[/template]
[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateImplementationSource('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateAttribute/]
[import ecore4CPP::generator::main::generateClass/]
[import ecore4CPP::generator::main::generateOperation/]
[import ecore4CPP::generator::main::generatePersistence/]
[import ecore4CPP::generator::main::generateReference/]
[import ecore4CPP::generator::main::generateStructuralFeatureSetGet /]
[import ecore4CPP::generator::main::generateType/]
[import ecore4CPP::generator::main::generateUnion /]
[import ecore4CPP::generator::main::generateModel /]
[import ecore4CPP::generator::main::helper /]

[template public generateImplementationSource(aClass : EClass) { className : String = aClass.name.toUpperFirst().concat('Impl'); }]
[file (aClass.ePackage.name.concat('/impl/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[aClass.ePackage.name/]/impl/[className.concat('.hpp')/]"

[defineDebugMacros()/]

#include <cassert>
#include <iostream>

[generateAbstractDataTypesIncludes()/]
#include "abstractDataTypes/SubsetUnion.hpp"
[if (aClass.eAttributes.eType->select(requiresAny())->size() = 0 and aClass.eOperations.eParameters.eType->select(requiresAny())->size() > 0)]
#include "boost/any.hpp"
[/if]
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "[aClass.ePackage.name/]/impl/[aClass.ePackage.name.toUpperFirst().concat('PackageImpl')/].hpp"
[if (aClass.hasKey('includes'))]
[aClass.valueKey('includes')/]
[/if]

//Forward declaration includes
[for (element : EClassifier| aClass.includes()->selectByKind(EClass)->asOrderedSet()->sortedBy(name)) separator ('\n')]
#include "[element.ePackage.name/]/[element.name.toUpperFirst()/].hpp"
[/for]


[comment namespace /]
using namespace [aClass.ePackage.name/];

//*********************************
// Constructor / Destructor
//*********************************
[className/]::[className/]()
{
	//*********************************
	// Attribute Members
	//*********************************
	[for (aAttribute : EAttribute | aClass.eAttributes->asOrderedSet()->sortedBy(name)) separator ('\n')]
	[aAttribute.generateAttributeInit()/][/for]

	//*********************************
	// Reference Members
	//*********************************
	[comment]References must be initialized in this order:
	1st Unions
	2nd Subset Unions
	3rd Subsets that should be unions
	4th all the rest.
	[/comment]
	//References
	[for (aReference : EReference | aClass.eReferences->asOrderedSet()->sortedBy(name)) separator ('\n')]
	[aReference.generateReferenceInit()/]
	[/for]

	//Init references
	[for (aReference : EReference | aClass.eReferences->asOrderedSet()->sortedBy(name)) separator ('\n')]
	[aReference.InitReferences()/]
	[/for]
}

[className/]::~[className/]()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete [aClass.name.toUpperFirst()/] "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}


[let ref:OrderedSet(EReference) = aClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name)) separator('\n')]
//Additional constructor for the containments back reference
[if(ref->select(eType.name = aReference.eType.name)->size()>1 )]
	[if(ref->select(eType.name = aReference.eType.name)->asOrderedSet()->sortedBy(name)->first() = aReference)]
			[className/]::[className/]([aReference.generateReferenceType(true)/] par_[aReference.eType.name/], const int reference_id)
			:[className/]()
			{
				switch(reference_id)
				{	
				[for(multipleRef : EReference | ref->select(eType.name = aReference.eType.name)->sortedBy(name))]
				case [aClass.ePackage.name.toUpperFirst()/]Package::[multipleRef.getStaticAttributeIDName()/]:
					 m_[multipleRef.name/] = par_[aReference.eType.name/];
					 return;
				[/for]
				default:
				std::cerr << __PRETTY_FUNCTION__ <<" Reference not found in class with the given ID" << std::endl;
				}
			   
			}
	[/if]
	[else]
			[className/]::[className/]([aReference.generateReferenceType(true)/] par_[aReference.name/])
			:[className/]()
			{
			    m_[aReference.name/] = par_[aReference.name/];
			}
	[/if]




[/for]
[/let]


[comment]Don't forget to call the class contructor before initializing the unions and subsets![/comment]
[className/]::[className/](const [className/] & obj):[className/]()
{
	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy [aClass.name.toUpperFirst()/] "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	[for (att : EAttribute | aClass.eAllAttributes->asOrderedSet()->sortedBy(name))]
	m_[att.name/] = obj.[att.GetterName()/]();
	[/for]

	//copy references with no containment (soft copy)
	
	[for (ref : EReference | aClass.eAllReferences->select(aRef: EReference | aRef.isBackReference() or (aRef.containment = false and not aRef.hasSubset()))->asOrderedSet()->sortedBy(name))]
	[if (ref.hasSetter() or ref.upperBound = 1)]
	m_[ref.name/]  = obj.[ref.GetterName()/]();
	[else]
	[ref.generateReferenceType()/] _[ref.name/] = obj.[ref.GetterName()/]();
	m_[ref.name/].reset(new [ref.generateReferenceType(false)/](*(obj.[ref.GetterName()/]().get())));
	[/if]

	[/for]

	[comment]References must be copied in this order:
	1st Unions
	2nd Subset Unions
	3rd all the rest.
	[/comment]
	//Clone references with containment (deep copy)

	[for (ref : EReference | aClass.eAllReferences->select(eRef: EReference|(eRef.containment = true or eRef.hasSubset()) and (not eRef.isUnion()) and (not eRef.isBackReference()))->asOrderedSet()->sortedBy(name))]
	[if (ref.hasSetter() or ref.upperBound = 1)]
	if(obj.[ref.GetterName()/]()!=nullptr)
	{
		[if(ref.upperBound=1)]
		m_[ref.name/] = std::dynamic_pointer_cast<[ref.eType.generateType()/]>(obj.[ref.GetterName()/]()->copy());
		[else]
		m_[ref.name/] = std::dynamic_pointer_cast<Bag<[ref.eType.generateType()/]>>(obj.[ref.GetterName()/]()->copy());
		[/if]
	}
	[else]
	std::shared_ptr<Bag<[ref.eType.generateType()/]>> _[ref.name/]List = obj.[ref.GetterName()/]();
	for(std::shared_ptr<[ref.eType.generateType()/]> _[ref.name/] : *_[ref.name/]List)
	{
		this->[ref.GetterName()/]()->add(std::shared_ptr<[ref.eType.generateType()/]>(std::dynamic_pointer_cast<[ref.eType.generateType()/]>(_[ref.name/]->copy())));
	}
	[/if]
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Copying the Subset: " << "m_[ref.name/]" << std::endl;
	#endif
	[/for]

	[for (aReference : EReference | aClass.eReferences->select(eRef: EReference|eRef.containment = true and not eRef.isUnion())->asOrderedSet()->sortedBy(name)) separator ('\n')]
	[aReference.InitReferences()/]
	[/for]
}

std::shared_ptr<ecore::EObject>  [className/]::copy() const
{
	std::shared_ptr<ecore::EObject> element(new [className/](*this));
	return element;
}

std::shared_ptr<[needNamespace(aClass.ePackage, 'EClass')/]> [className/]::eStaticClass() const
{
	return [aClass.ePackage.name.concat('PackageImpl').toUpperFirst()/]::eInstance()->get[aClass.getMemberNameUpperFirst()/]();
}

//*********************************
// Attribute Setter Getter
//*********************************
[for (aAttribute : EAttribute | aClass.eAttributes->asOrderedSet()->sortedBy(name)) separator ('\n')]
[aAttribute.generateAttributeSetterImplementationCpp(true)/]

[aAttribute.generateAttributeGetterImplementationCpp()/]
[/for]

//*********************************
// Operations
//*********************************
[for (aOperation : EOperation | aClass.eOperations->asOrderedSet()->sortedBy(name)) separator ('\n')]
[aOperation.generateOperationImplementation()/]
[/for]

//*********************************
// References
//*********************************
[for (aReference : EReference | aClass.eReferences->asOrderedSet()->sortedBy(name)) separator ('\n')]
[aReference.generateReferenceCpp()/]
[/for]

//*********************************
// Union Getter
//*********************************
[aClass.generateUnionGetterCpp()/]

[aClass.generateGetThisPtrCPP()/]
[aClass.generateEContainerOperationCPP()/]

//*********************************
// Structural Feature Getter/Setter
//*********************************
[aClass.generateeGetImpl()/]

[aClass.generateeSetImpl()/]

//*********************************
// Persistence Functions
//*********************************
[aClass.generatePersistenceImpl()/]

[/file]
[/template]